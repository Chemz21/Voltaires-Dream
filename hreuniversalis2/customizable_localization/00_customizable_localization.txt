#AVIALABLE CUSTOM LOCALISATION KEYS
#When adding new custom loc keys, add them to the appropriate category (or add a new one) and describe them. Name the strings "String_X" where x is its content.
# To not display anything, you can use 'localisation_key = ""'
# Please add one example sentence for each key.

#As this list grow organize with categories.
#Current loc keys in this file:
#GetTributaryOverlord
#GetOldEra
#GetLocalPowerStructure
#GetGovernmentSupporters
#GetNoblesReplacementForOtherGovernments


### Titular for Overlord
#Ex: "On a mission to visit the Son of Heaven"
defined_text = {
    name = GetTributaryOverlord

    text = {
        localisation_key = string_tributary_overlord_title
        trigger = {
			is_emperor_of_china = yes
        }
    }
}

#Old Era
#Ex: "A Medieval Manuscript"
defined_text = {
    name = GetOldEra

    text = {
        localisation_key = string_middle_ages
        trigger = {
			capital_scope = {
				continent = europe
			}
        }
    }
	text = {
        localisation_key = string_pre_islamic
        trigger = {
			capital_scope = {
				religion_group = muslim
			}
        }
	}
	text = {
        localisation_key = string_ancient_era
        trigger = {
				capital_scope = {
					NOT = { continent = europe }
					NOT = { religion_group = muslim }
				}
        }
	}
}

#Low Level Official
#Ex: "A local Mandarin immediately reacted to the..."
defined_text = {
    name = GetLowLevelOfficialForCountry

	text = {
        localisation_key = string_bey
        trigger = {
			religion_group = muslim
        }
	}
	text = {
		localisation_key = string_zupan
		trigger = {
			culture_group = south_slavic
		}
	}
	text = {
		localisation_key = string_bailif
		trigger = {
			OR = {
				culture_group = british
				culture_group = french
				culture_group = germanic
			}
		}
	}
	text = {
		localisation_key = string_bailif
		trigger = {
			OR = {
				culture_group = british
				culture_group = french
				culture_group = germanic
			}
		}
	}
	text = {
		localisation_key = string_ispan
		trigger = {
			culture_group = carpathian
		}
	}
	text = {
        localisation_key = string_official
        trigger = {
			NOT = { religion_group = muslim }
			NOT = {
				culture_group = south_slavic
				culture_group = british
				culture_group = french
				culture_group = germanic
			}
        }
	}
}

#A local power structure, such as a court or local parliament
#Ex: "The Court refused our request to hand over the culprits"
#TODO: ADD MORE
defined_text = {
    name = GetLocalPowerStructure

    text = {
        localisation_key = string_court
		trigger = {
			religion_group = christian
		}
    }
	text = {
        localisation_key = string_junta
		trigger = {
			is_year = 1700
			culture_group = iberian
		}
    }
	text = {
		 localisation_key = string_court
		trigger = {
			NOT = { religion_group = christian }
		}
	}
}

#Supporters of the Ruler, be he a Khan, King or President
#Ex: "The Royalists have come to our aid"
defined_text = {
    name = GetGovernmentSupporters

    text = {
        localisation_key = string_royalist
		trigger = {
			government = monarchy
		}
    }
    text = {
        localisation_key = string_khanzada
		trigger = {
			has_reform = steppe_horde
		}
    }
	text = {
        localisation_key = string_royalist
		trigger = {
			government = tribal
		}
    }
	text = {
		 localisation_key = string_republican
		trigger = {
			government = republic
		}
	}
	text = {
		 localisation_key = string_clergy
		trigger = {
			government = theocracy
		}
	}
}

#Nobility does not exist everywhere. This is for other similarly influencial groups within a country.
#Ex: "Nobles Worried"
defined_text = {
	name = GetNoblesReplacementForOtherGovernments

	text = {
		localisation_key = string_nobles
		trigger = {
			NOT = { government = republic }
		}
	}
	text = {
		localisation_key = string_influential_families
		trigger = {
			government = republic
		}
	}
}

#When you need to refer to a ruling social class but cannot be sure you're dealing with a monarchy.
#Ex: "The [Nobles] are Concerned"
defined_text = {
	name = GetRoyalOrState

	text = {
		localisation_key = string_royal
		trigger = {
			NOT = { government = republic }
		}
	}
	text = {
		localisation_key = string_state
		trigger = {
			government = republic
		}
	}
}

#When you need to refer a government/state
#In the future incorporate more special things here
#Ex: "The [Crown] of X"
defined_text = {
	name = GetStateForm

	text = {
		localisation_key = string_crown
		trigger = {
			government = monarchy
			NOT = { tag = TUR }
		}
	}
	text = {
		localisation_key = string_sublime_porte
		trigger = {
			government = monarchy
			tag = TUR
		}
	}
	text = {
		localisation_key = string_council
		trigger = {
			government = republic
		}
	}
	text = { #fallback
		localisation_key = string_govtname
		trigger = {
			NOT = {
				government = monarchy
				government = republic
			}
		}
	}
}

#Rich or influential Russian Families
#Ex: "The [Stroganov] Family is offering to fund colonizationin Siberia"
defined_text = {
	name = GetInfluentialRussians

	text = {
		localisation_key = string_stroganov
		trigger = {
			owns = 6144
		}
	}
	text = {
		localisation_key = string_khilkov
		trigger = {
			owns = 3944
		}
	}
	text = {
		localisation_key = string_dolgorukov
		trigger = {
			owns = 6594
		}
	}
	text = {
		localisation_key = string_romodanovsky
		trigger = {
			always = yes
		}
	}
	text = {
		localisation_key = string_shuysky
		trigger = {
			always = yes
		}
	}
	text = {
		localisation_key = string_durnovo
		trigger = {
			always = yes
		}
	}
	text = {
		localisation_key = string_romanov
		trigger = {
			NOT = { dynasty = Romanov }
		}
	}
	text = {
		localisation_key = string_sheremetev
		trigger = {
			is_year = 1700
		}
	}
	text = {
		localisation_key = string_shuvalov
		trigger = {
			is_year = 1700
		}
	}
	text = {
		localisation_key = string_demidov
		trigger = {
			is_year = 1700
		}
	}
}

#Gets name of the religious scholars you currently have invited. Uses loc for schools.
#Ex: The Maliki scholars we have invited are making themselves at home. 
defined_text = {
	name = GetReligiousScholars
	random = no
	
	text = {
		localisation_key = ismaili_school
		trigger = {
			has_country_modifier = ismaili_scholar_modifier
		}
	}
	text = {
		localisation_key = zaidi_school
		trigger = {
			has_country_modifier = zaidi_scholar_modifier
		}
	}
	text = {
		localisation_key = jafari_school
		trigger = {
			has_country_modifier = jafari_scholar_modifier
		}
	}
	text = {
		localisation_key = shafii_school
		trigger = {
			has_country_modifier = shafii_scholar_modifier
		}
	}
	text = {
		localisation_key = hanafi_school
		trigger = {
			has_country_modifier = hanafi_scholar_modifier
		}
	}
	text = {
		localisation_key = maliki_school
		trigger = {
			has_country_modifier = maliki_scholar_modifier
		}
	}
	text = {
		localisation_key = hanbali_school
		trigger = {
			has_country_modifier = hanbali_scholar_modifier
		}
	}
	text = {
		localisation_key = ibadi_school
		trigger = {
			has_country_modifier = ibadi_scholar_modifier
		}
	}
	text = {
		localisation_key = sufri_school
		trigger = {
			has_country_modifier = sufri_scholar_modifier
		}
	}
	text = {
		localisation_key = azraqi_school
		trigger = {
			has_country_modifier = azraqi_scholar_modifier
		}
	}
	text = {
		localisation_key = alevi_school
		trigger = {
			has_country_modifier = alevi_scholar_modifier
		}
	}
	text = {
		localisation_key = alawi_school
		trigger = {
			has_country_modifier = alawi_scholar_modifier
		}
	}
	text = {
		localisation_key = nizari_school
		trigger = {
			has_country_modifier = nizari_scholar_modifier
		}
	}
	text = {
		localisation_key = qarmati_school
		trigger = {
			has_country_modifier = qarmati_scholar_modifier
		}
	}
}

#Definite Article before name? (ie for country names in plural form)
defined_text = {
    name = GetDefiniteArticleBeforePluralCountry
	random = no
	
	text = {
		
        localisation_key = string_definite_article_before_country
        trigger = {
			tag_with_plural_name_trigger = yes
        }
    }
    text = {
        localisation_key = string_empty
        trigger = {
			always = yes
        }
    }
}

#Hiding regency council in titles

defined_text = {
    name = GetRulerOrRegency
	random = no
	
	text = {
        localisation_key = string_ruler_name_really
        trigger = {
			has_regency = no
        }
    }
    text = {
        localisation_key = string_regency_council
        trigger = {
			has_regency = yes
        }
    }
}

#RB Symposium

defined_text = {
    name = OxOrBridgeTitle
	random = no
	
	text = {
    localisation_key = flavor_eng.9880.t1
		trigger = {
			OR = {
				AND = {
					check_variable = {
						which = oxbridge_symposium
						value = 1
					}
					NOT = {
						check_variable = {
							which = oxbridge_symposium
							value = 2
						}
					}
				}
				AND = {
					check_variable = {
						which = oxbridge_symposium
						value = 0
					}
					NOT = {
						check_variable = {
							which = oxbridge_symposium
							value = 1
						}
					}
				}
			}
		}
	}
	text = {
    localisation_key = flavor_eng.9880.t2
		trigger = {
			check_variable = {
				which = oxbridge_symposium
				value = 2
			}
		}
	}
}

defined_text = {
    name = OxOrBridgeLocation
	random = no
	
	text = {
    localisation_key = flavor_eng.9880.loc0
		trigger = {
			check_variable = {
				which = oxbridge_symposium
				value = 0
			}
			NOT = {
				check_variable = {
					which = oxbridge_symposium
					value = 1
				}
			}
		}
	}
	text = {
    localisation_key = flavor_eng.9880.loc1
		trigger = {
			check_variable = {
				which = oxbridge_symposium
				value = 1
			}
			NOT = {
				check_variable = {
					which = oxbridge_symposium
					value = 2
				}
			}
		}
	}
	text = {
    localisation_key = flavor_eng.9880.loc2
		trigger = {
			check_variable = {
				which = oxbridge_symposium
				value = 2
			}
			NOT = {
				check_variable = {
					which = oxbridge_symposium
					value = 3
				}
			}
		}
	}
}

defined_text = {
    name = OxOrBridgeSubject
	random = no
	
	text = {
    localisation_key = flavor_eng.9880.sub1
		trigger = {
			check_variable = {
				which = oxbridge_subject
				value = 1
			}
			NOT = {
				check_variable = {
					which = oxbridge_subject
					value = 2
				}
			}
		}
	}
	text = {
    localisation_key = flavor_eng.9880.sub2
		trigger = {
			check_variable = {
				which = oxbridge_subject
				value = 2
			}
			NOT = {
				check_variable = {
					which = oxbridge_subject
					value = 3
				}
			}
		}
	}
	text = {
    localisation_key = flavor_eng.9880.sub3
		trigger = {
			check_variable = {
				which = oxbridge_subject
				value = 3
			}
			NOT = {
				check_variable = {
					which = oxbridge_subject
					value = 4
				}
			}
		}
	}
	text = {
    localisation_key = flavor_eng.9880.sub4
		trigger = {
			check_variable = {
				which = oxbridge_subject
				value = 4
			}
			NOT = {
				check_variable = {
					which = oxbridge_subject
					value = 5
				}
			}
		}
	}
	text = {
    localisation_key = flavor_eng.9880.sub5
		trigger = {
			check_variable = {
				which = oxbridge_subject
				value = 5
			}
		}
	}
}


#Makes the country name usable (grammatically) in normal text at the start of the sentence. So examples of what comes out are "France", "The Ottoman Sultanate", "The Ming Empire" and "The Iriquoi Tribe" (I am open to suggestions on the last) rather than "France", "Ottomans", "Ming" and "Iriquoi"
defined_text = {
	name = GetUsableNameCap
	random = no
	
	text = {
		localisation_key = plural_country_name_CAP
		trigger = {
			OR = {
				technology_group = north_american
				tag_with_plural_name_trigger = yes
			}
		}
	}
	text = {
		localisation_key = already_has_proper_name
		trigger = {
			NOT = {
				OR = {
					technology_group = north_american
					tag_with_plural_name_trigger = yes
				}
			}
		}
	}
}


#When you need to refer to a ruling social class but cannot be sure you're dealing with a monarchy.
#Ex: "Several [noblemen] / [politicians] / [clergymen]"
defined_text = {
	name = GetNoblemenPoliticians

	text = {
		localisation_key = string_noblemen
		trigger = {
			NOT = { government = republic }
			NOT = { government = theocracy }
			NOT = {
				has_parliament = yes
			}
		}
	}
	text = {
		localisation_key = string_politicians
		trigger = {
			OR = {
				has_parliament = yes
				government = republic
			}
		}
	}
	text = {
		 localisation_key = string_clergymen
		trigger = {
			government = theocracy
			NOT = {
				has_parliament = yes
			}
		}
	}
}

#When you need to refer to a ruling social class but cannot be sure you're dealing with a monarchy.
#Ex: "Several [members of the nobility] / [politicians] / [members of the clergy]"
defined_text = {
	name = GetNobilityPoliticians

	text = {
		localisation_key = string_members_nobility
		trigger = {
			NOT = { government = republic }
			NOT = { government = theocracy }
			NOT = {
				has_parliament = yes
			}
		}
	}
	text = {
		localisation_key = string_politicians
		trigger = {
			OR = {
				has_parliament = yes
				government = republic
			}
		}
	}
	text = {
		 localisation_key = string_clergy_members
		trigger = {
			government = theocracy
			NOT = {
				has_parliament = yes
			}
		}
	}
}


#Because "the Papal Pope" would be a new kind of stupid, also covers regency councils
#Ex: The [English King] / The [Pope] / The [English Regency Council]
defined_text = {
	name = GetRulerAdjAndTitle

	text = {
		localisation_key = string_ruler_adj_and_title
		trigger = {
			NOT = { tag = PAP }
			has_regency = no
		}
	}
	text = {
		localisation_key = string_ruler_title
		trigger = {
			tag = PAP
		}
	}
	text = {
		localisation_key = string_adj_and_regency_council
		trigger = {
			has_regency = yes
		}
	}
}


#Gets ruler title or regency council (not strictly speaking necessary as it will still find "king" even if said king is 1 year old)
#Ex: The [King] / The [Regency Council]
defined_text = {
	name = GetRulerTitleOrRegency

	text = {
		localisation_key = string_ruler_title
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_regency_council_2
		trigger = {
			has_regency = yes
		}
	}
}


#If you want to refer to the ruler by name but are not sure whether there may be a regency
#Ex: [King James] / [the Regency Council]
defined_text = {
	name = GetRulerTitleAndNameOrRegency

	text = {
		localisation_key = string_ruler_title_and_name
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_regency_council_no_cap
		trigger = {
			has_regency = yes
		}
	}
}

#If you want to refer to the ruler by name but are not sure whether there may be a regency
#Ex: [King James] / [The Regency Council]
defined_text = {
	name = GetRulerTitleAndNameOrRegencyCap

	text = {
		localisation_key = string_ruler_title_and_name
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_regency_council
		trigger = {
			has_regency = yes
		}
	}
}